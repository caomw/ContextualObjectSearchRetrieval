function [C] = generate_constraints_by_number_C(X, y, num_constraints)% generate_constraints : generate contextual constraints% [chunks, neglinks, S, D] = generate_constraints(X, y, p1, p2)%	X  - d*n data features%	y  - 1*n class labels%	p1 - percentage of positive constraints to be produced%	p2 - percentage of positive constraints to be produced% returns:%	chunks   - n*1 vector: to mark chunket id of connected data examples%   neglinks - k*k matrix: to count the negative links between chunklets %   S        - n*n pairwise similarity matrix%   D        - n*n pairwise dissimilarity matrix% Copyright (c) 2005-2006 Steven CH Hoi% All rights Reserved[d n] = size(X);chunks = -ones(n,1);%---------------------------------------------------------------% 1. generate total pairwise constraints: 0.5*n*(n-1)%---------------------------------------------------------------C_pos=[]; %set of positive constraintsC_neg=[]; %set of negative constraintsfor i=1:(n-1)    % positive    ind=find(y==y(i));    ind=ind((find(ind>i)));    C_pos(end+1:end+length(ind),:)=[i*ones(length(ind),1)';ind]';    % negative    ind=find(y~=y(i));    ind=ind((find(ind>i)));    C_neg(end+1:end+length(ind),:)=[i*ones(length(ind),1)';ind]';endn_pos=length(C_pos(:,1)); % number of total positive constraintsn_neg=length(C_neg(:,1)); % number of total negative constraints%---------------------------------------------------------------% 2. randomly produce pos/neg pairwise constraints%---------------------------------------------------------------% randomize pairwise constraintspos_perm=randperm(n_pos);neg_perm=randperm(n_neg);% count the constraints to be produced% m_pos=ceil(p1*n_pos); % number of positive constraints % % m_neg=ceil(p2*n_neg); % number of positive constraints m_pos = floor(num_constraints/2);if m_pos > size(C_pos,1)    m_pos = size(C_pos,1);endm_neg = min(num_constraints-m_pos,length(neg_perm));C_pos1 = C_pos(pos_perm(1:m_pos),:);C_pos1 = [C_pos1 ones(size(C_pos1,1),1)];C_neg1 = C_neg(neg_perm(1:m_neg),:);C_neg1 = [C_neg1 -ones(size(C_neg1,1),1)];C = [C_pos1;C_neg1];